<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-04-02T20:18:59+00:00</updated><id>/feed.xml</id><title type="html">jtimberman’s blog</title><subtitle>Operations, Automation, Deployment, Workflows, DevOps; see my About page for ways you can support me.</subtitle><author><name>Joshua Timberman</name></author><entry><title type="html">Grief</title><link href="/blog/2022/02/17/grief" rel="alternate" type="text/html" title="Grief" /><published>2022-02-17T19:00:00+00:00</published><updated>2022-02-17T19:00:00+00:00</updated><id>/blog/2022/02/17/grief</id><content type="html" xml:base="/blog/2022/02/17/grief">&lt;p&gt;I realized something recently. I am undergoing profound work-related grief.&lt;/p&gt;

&lt;p&gt;I am still not done grieving and I am not over the sense of loss from putting my whole self, my heart and soul, and my entire career identity into Chef.&lt;/p&gt;

&lt;p&gt;If you’ll indulge me, I would like to share some background.&lt;/p&gt;

&lt;p&gt;I have been doing system administration and system administration-adjacent work since I graduated college in 1999. I worked for a few companies before Chef (neé Opscode), but none that I cared for so deeply. None where I literally had the privilege of working alongside my two lifelong best friends and building something truly special.&lt;/p&gt;

&lt;p&gt;It all ended, in finality, when the acquisition of Chef by Progress was completed, and I was given my disposition from Progress. That is, I, along with my team (including one of the aforementioned best friends), had an offer to stay at the company for 120 days for a transition period, at the end of which our positions would be terminated.&lt;/p&gt;

&lt;p&gt;I had three days to accept this offer, and it was tied to various compensation mechanisms including severance and transition bonuses.&lt;/p&gt;

&lt;p&gt;I never felt more betrayed. I know that in the USA, we live in capitalism, and I know that mergers and acquisitions involve a variety of decisions that are made around eliminating redundancies, and similar.&lt;/p&gt;

&lt;p&gt;It doesn’t change how I felt. How I still feel, really.&lt;/p&gt;

&lt;p&gt;As many people reading this will know, I was a part of Chef from the earliest days. I was one of the first deep experts in the theory behind it Chef (the software), the software itself, and how best to write cookbooks. I worked my tail off in the early days. I was doing “DevRel” before the term was coined. I was doing developer (or, system administrator/operations) advocacy and relations. I literally helped directly or indirectly transform the careers of hundreds, if not thousands of tech workers through my kindness, empathy, hugs, and encouragement in working to support users on IRC and mailing lists or answering questions at conferences. I met so many lovely and wonderful people, many of whom will be lifelong friends.&lt;/p&gt;

&lt;p&gt;I did all this and more, from July 2, 2008 until January 29, 2021. Even after I received my disposition (I accepted, of course), I didn’t stop helping people be successful with Chef. My transition work was to help Progress spin up a new team of SREs to run and maintain Hosted Chef. Don’t ask me why they decided to do this, it never made sense to me. Anyway, I worked with the team to ensure that all the bits and pieces of the infrastructure we managed were documented, and we created video guides about the various components. Every standup turned into an “AMA”, and I answered everything I could in as much detail as I could, sometimes recording the Zoom meetings so the team could review or transcribe later.&lt;/p&gt;

&lt;p&gt;I helped the new manager interview, and design interviews to help hire new team members. I think I conducted a dozen technical interviews - the numbers blur with time, and overlap with my own interviewing for a position to move to after January 29th. In the end, I think the team hired four or five new SREs whom all had to be trained on the Hosted Chef infrastructure, and the supporting systems that we had responsbility to manage.&lt;/p&gt;

&lt;p&gt;Then on January 29th, tears streaking down my face, I performed the employee offboarding “SOP” (Standard Operating Procedure) that my team was responsible for one last time. I removed myself from the GitHub organizations (there were nine).  I removed myself from DockerHub and Vagrant Cloud. I removed my user from PagerDuty. I disabled my user in Okta. I signed out of Gmail, which I used since 2008, and from Slack which I used whenever Chef adopted it (2015 I think?), and removed all the associated accounts and/or apps from my phone. I rebooted the laptop to perform a complete wipe, then shut it down, and cried.&lt;/p&gt;

&lt;p&gt;I haven’t stopped crying since, to be honest.&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><summary type="html">I realized something recently. I am undergoing profound work-related grief.</summary></entry><entry><title type="html">On To New Adventures</title><link href="/blog/2021/07/23/on-to-new-adventures" rel="alternate" type="text/html" title="On To New Adventures" /><published>2021-07-23T19:10:00+00:00</published><updated>2021-07-23T19:10:00+00:00</updated><id>/blog/2021/07/23/on-to-new-adventures</id><content type="html" xml:base="/blog/2021/07/23/on-to-new-adventures">&lt;p&gt;&lt;a href=&quot;https://twitter.com/jtimberman/status/1404482295772241921&quot;&gt;Well that didn’t go as expected&lt;/a&gt;, I said on June 14th. “That” was a meeting I had with my manager at Sym. He scheduled the meeting to tell me they were letting me go, and my last day would be that Friday, the 18th.&lt;/p&gt;

&lt;p&gt;Unfortunately, it turned out the timing was not right for the position I was hired for, and they would not be ready to support me in that for months, at least. That is really all it amounted to - sometimes things don’t work out, especially in tech startups. Sym has a great product, and a team of great people, and I wish them all the best of luck.&lt;/p&gt;

&lt;p&gt;Fortunately, I have truly awesome #ChefFriends and a diverse network of awesome professional connections. Many of you reached out and offered to help, many of you offered advice and encouragement, and I appreciate you all. After three solid weeks of interviewing with a dozen different companies, I accepted an offer.&lt;/p&gt;

&lt;p&gt;I am thrilled to announce that on Monday, July 26th, I am joining the team at &lt;a href=&quot;https://allma.io/&quot;&gt;Allma.io&lt;/a&gt; as the Head of Advocacy and Community. The product fills a need that is near and dear to my heart - incident collaboration. As an operations leader of teams and organizations in incident response, I have wished for the kind of product that Allma has built, and there is so much more potential for collaborative workflows in the future. I look forward to helping grow those capabilities and make it a truly delightful platform for every organization.&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><summary type="html">Well that didn’t go as expected, I said on June 14th. “That” was a meeting I had with my manager at Sym. He scheduled the meeting to tell me they were letting me go, and my last day would be that Friday, the 18th.</summary></entry><entry><title type="html">Hello, Sym</title><link href="/blog/2021/01/31/hello-sym" rel="alternate" type="text/html" title="Hello, Sym" /><published>2021-01-31T01:10:00+00:00</published><updated>2021-01-31T01:10:00+00:00</updated><id>/blog/2021/01/31/hello-sym</id><content type="html" xml:base="/blog/2021/01/31/hello-sym">&lt;p&gt;As you &lt;a href=&quot;/blog/2021/01/29/cheffriends-and-hugops&quot;&gt;probably know&lt;/a&gt;, Friday, January 29 was my last day with Chef/Progress. Many people have asked what I’m going to do next. If the title of this post isn’t obvious, I’m happy to announce that I will start a new position as the Head of Community and Support at &lt;a href=&quot;https://symops.com/&quot;&gt;Sym&lt;/a&gt; on Monday, February 1st.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sym&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;announce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_hire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jtimberman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2021-02-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the acquisition of Chef by Progress was announced, I started looking around for open positions in case I didn’t get a permanent offer. At the time, I didn’t know what would happen with Progress, but as a lifelong sysadmin, I wanted to have a contingency plan ready. It’s a good thing I did, because as I shared the other day, I had a firm termination date ahead of me once the deal closed. My early probes certainly helped, and I was contacted by &lt;a href=&quot;https://twitter.com/dhaliwas&quot;&gt;Sunil Dhaliwal of Amplify Partners&lt;/a&gt;, an &lt;a href=&quot;https://blog.chef.io/opscode-closes-11-million-series-b-round&quot;&gt;early investor in Chef (then, via Battery Ventures)&lt;/a&gt;. Sunil was gracious enough to have a chat and make some introductions for me with some of his portfolio companies. He was particularly excited about Sym, and they recently closed a &lt;a href=&quot;https://compliance.dev/2020/10/20/hello-sym/&quot;&gt;Series A funding round&lt;/a&gt; with Amplify.&lt;/p&gt;

&lt;p&gt;Besides introductions, Sunil offered me some excellent advice, “Joshua, think about what you want to do. Really, think about your strengths and when you’re interviewing, think about what excites you the most,” he said (paraphrased). “Consider a role that fits &lt;em&gt;that&lt;/em&gt; best.” Most of the roles I first considered were “DevOps,” “SRE,” or similar. Despite my expertise in these areas, I discovered that kind of work wasn’t inspiring me enough. Turns out, I just wasn’t excited thinking about Kubernetes or running a SaaS.&lt;/p&gt;

&lt;p&gt;The thing that I kept going back to in interviews was how excited I was about having taught people the best ways to use Chef, building a community of experts, and developing content for us all to use. It was that early Technical Evangelist role where so many of you know me. My experience interviewing last fall for my next position taught me a lot of things, and I was determined to find a role that would maximise my skills in empathy, making people successful with a technology, and helping a company grow a community and a culture of being awesome. Really, I wanted to find something where I can live up to my preferred &lt;a href=&quot;https://twitter.com/evangoer/status/447049913310797824&quot;&gt;job title of Code Cleric&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The conversations I had with Sym were firmly in line with that set of goals. I feel that I am 100% a great fit for the role at the head of community and support for them, and of course, they feel the same. I know I will help Yasyf and the team succeed at providing the best (security) workflow tooling and platform. Along the way I will have to learn some things that aren’t familiar to me - yet. So, I plan to meet this head on with all the intensity and passion I brought forth in my career over the past 13 years.&lt;/p&gt;

&lt;p&gt;I would love to bring you along on this journey as well, and I invite you all to take a look at what &lt;a href=&quot;https://symops.com/&quot;&gt;Sym has to offer&lt;/a&gt;. I would love to hear your feedback as I settle in and work to build up the community and support organization. Of course, as an early growth startup, &lt;a href=&quot;https://boards.greenhouse.io/sym&quot;&gt;we’re hiring&lt;/a&gt;, so perhaps you will join us?&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><summary type="html">As you probably know, Friday, January 29 was my last day with Chef/Progress. Many people have asked what I’m going to do next. If the title of this post isn’t obvious, I’m happy to announce that I will start a new position as the Head of Community and Support at Sym on Monday, February 1st.</summary></entry><entry><title type="html">ChefFriends and HugOps</title><link href="/blog/2021/01/29/cheffriends-and-hugops" rel="alternate" type="text/html" title="ChefFriends and HugOps" /><published>2021-01-29T20:00:00+00:00</published><updated>2021-01-29T20:00:00+00:00</updated><id>/blog/2021/01/29/cheffriends-and-hugops</id><content type="html" xml:base="/blog/2021/01/29/cheffriends-and-hugops">&lt;p&gt;&lt;a href=&quot;https://twitter.com/jtimberman/status/1355205226119131145&quot;&gt;“It is done,” he tweeted&lt;/a&gt;. Today is my last day at Chef/Progress. This is a journey nearly 13 years in the making, and what a journey it has been.&lt;/p&gt;

&lt;p&gt;For me, it started with HJK Solutions, a consulting company started by two of my best friends, Adam Jacob and Nathan Haneysmith. When they first started the company, they asked if I was interested in joining them. I was, but I couldn’t move to Seattle, or really take the risk of a new consulting gig. Adam said “Well, if you can’t join us, at least use the tech stack we’re working with, and check out &lt;a href=&quot;http://infrastructures.org/&quot;&gt;infrastructures.org&lt;/a&gt;.” That tech stack was Ruby, Puppet, and some home-grown code. I did go forth and implement that when I went to SANS.&lt;/p&gt;

&lt;p&gt;It paid off, in spades.&lt;/p&gt;

&lt;p&gt;I was chatting with Adam in early 2008, and he said “Hey so we’re going to make a new product to replace our use of Puppet. And we’re going to make a product company instead of a consulting company. You want in?” This time around, I could work remote, and there was more certainty, since they were raising funds through venture capital. “Sure,” I said, “How do we start?” Adam pointed me at a job posting for “Senior Linux System Administrator” - essentially I would be doing his job while he wrote the initial version of Chef, and raised capital.&lt;/p&gt;

&lt;p&gt;I started on July 2, 2008. I mark this as my start date on this journey, though it was a journey than began with HJK. Opscode wouldn’t be founded for a couple more months, and my “HR Start Date” was always sometime in September. I don’t even remember when anymore. &lt;a href=&quot;https://blog.chef.io/announcing-chef&quot;&gt;On January 15, 2009, we released the initial version of Chef&lt;/a&gt;, and the whirlwind of this adventure truly kicked into high gear. We developed content, we answered questions in IRC, Twitter, and the mailing list. Through it all, I met all of you who have become a part of this community, and built your own companies and careers.&lt;/p&gt;

&lt;p&gt;We made impacts. We dramatically shifted the way that people think about managing infrastructure. We drank beer, hugged, and cheered each other on as we moved around between companies and positions. I attended every Seattle-based Chef Summit (plus one in London), and every US-based ChefConf. I got to travel around the USA and to Europe, &lt;a href=&quot;https://speakerdeck.com/jtimberman&quot;&gt;speaking at conferences&lt;/a&gt; and training customers and the community on Chef.&lt;/p&gt;

&lt;p&gt;The best part of it all was the people. I worked my ass off to make the product and the cookbook content the best it could possibly be. I made mistakes, I learned a lot of lessons. I grew as a person, as a professional, and as a mentor and leader. At the end of the day, as always, it’s the people that matter most.&lt;/p&gt;

&lt;p&gt;I worked for HJK/Opscode/Chef for 4479 days. I had eight different titles, and 14 different managers. At one point when I reported to him,  Nathen Harvey said “Joshua, you know a lot about Chef, but you haven’t done any hands on production operations in a few years. You should see about fixing that.” So, I did. I talked to friends at other companies to see if they’d do some kind of “ops exchange” where I could help them with their infrastructure management with Chef, in exchange for fun times and blog posts. As it turns out, Chef itself had an job opening for the Operations team. I thought “Where better to build and manage production infrastructure with Chef, than at Chef??” After all, a lot of my own code, cookbooks, and guides were used by the Operations team.&lt;/p&gt;

&lt;p&gt;It was wild and fun (except heartbleed and SSL certificates). And, to shortcut an otherwise long story, I worked on operating Hosted Chef, then the internal release engineering and engineering services team, then moved back to the Hosted Chef operations team. I stepped up to manage the team a couple of years ago when Ben Rockwood left to pursue his own awesome adventure. The move from an IC to management is a complete career change, and the ChefOps team has a lot of responsibilities including Hosted Chef, so that kept me engaged.&lt;/p&gt;

&lt;p&gt;Then, late last year on September 8, 2020, it was &lt;a href=&quot;https://investors.progress.com/news-releases/news-release-details/progress-announces-acquisition-chef&quot;&gt;announced that Progress Software was going to acquire Chef&lt;/a&gt;. On the last day of Chef, when the acquisition deal was closed, I had my conversation with the new company, Progress. I was given a transition offer of 120 days. I took it, so I could transfer what I knew about my areas of responsibility - chiefly, Hosted Chef. Today is the termination date for that transition. I wholeheartedly believe that the future of Hosted Chef is in good hands - the new Operations team is quick-learning and capable. In fact, they have already done a database upgrade and a new version deployment!&lt;/p&gt;

&lt;p&gt;As for myself, I was able to interview with a number of companies, and received an offer to start with one on February 1st - they were gracious enough to give me a start date after my termination date with Progress so that I could ensure as smooth a transition to the new team as possible. I’ll have another post soon about my new employer. Needless to say, I’m excited about the opportunity to continue serving the tech community, and advocate for better software for humans to use.&lt;/p&gt;

&lt;p&gt;Until we meet again, #HugOps to all my #ChefFriends. I love you dearly, and I am honored to be a part of this community.&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><summary type="html">“It is done,” he tweeted. Today is my last day at Chef/Progress. This is a journey nearly 13 years in the making, and what a journey it has been.</summary></entry><entry><title type="html">New Blog Who Dis?</title><link href="/blog/2021/01/28/new-blog-who-dis" rel="alternate" type="text/html" title="New Blog Who Dis?" /><published>2021-01-28T04:03:00+00:00</published><updated>2021-01-28T04:03:00+00:00</updated><id>/blog/2021/01/28/new-blog-who-dis</id><content type="html" xml:base="/blog/2021/01/28/new-blog-who-dis">&lt;p&gt;Hello there, traveler! It’s been awhile, hasn’t it, since I updated this page?&lt;/p&gt;

&lt;p&gt;You see, I’ve been pretty busy since my last post in September, 2015. I moved back to the Chef Operations team, was promoted to a Principal Operations Engineer, and then made a career shift to become the Engineering Operations Manager of the team.&lt;/p&gt;

&lt;p&gt;All that kept me pretty busy. I also had some real life things happening, and between it all, I just didn’t have the time or energy to work on content for this site.&lt;/p&gt;

&lt;p&gt;Fast forward to 2020, whilst we’re in the middle of a global pandemic, &lt;a href=&quot;https://blog.chef.io/the-fourth-chapter-of-chef-has-arrived-progress-to-purchase-chef&quot;&gt;Chef was acquired by Progress&lt;/a&gt;. I’ll have more to &lt;a href=&quot;https://twitter.com/jtimberman/status/1303385915415392256&quot;&gt;say about that&lt;/a&gt; soon, don’t worry. As such, I decided to revamp this site. I switched to Plain Ol’ Jekyll from my Octopress install. I also decided to try out GitHub actions with it, and as such made the &lt;a href=&quot;https://github.com/jtimberman/jtimberman.housepub.org&quot;&gt;repository for this site&lt;/a&gt; public. After all, Nathen Harvey always teased me about having a private repository for my publicly available blog.&lt;/p&gt;

&lt;p&gt;So, stay tuned. In the coming days I’m planning some content here around my next steps, and my thoughts on working for a single growth-based startup for nearly 13 years.&lt;/p&gt;

&lt;p&gt;In the meantime, &lt;a href=&quot;https://www.youtube.com/watch?v=kizoZUyJK8w&quot;&gt;here’s a red panda up to some hijinks&lt;/a&gt;.&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><summary type="html">Hello there, traveler! It’s been awhile, hasn’t it, since I updated this page?</summary></entry><entry><title type="html">Quick Tip: Alternative Chef Shell With Pry</title><link href="/blog/2015/09/01/quick-tip-alternative-chef-shell-with-pry" rel="alternate" type="text/html" title="Quick Tip: Alternative Chef Shell With Pry" /><published>2015-09-01T23:22:00+00:00</published><updated>2015-09-01T23:22:00+00:00</updated><id>/blog/2015/09/01/quick-tip-alternative-chef-shell-with-pry</id><content type="html" xml:base="/blog/2015/09/01/quick-tip-alternative-chef-shell-with-pry">&lt;p&gt;This quick tip brought to you by the letters “p,” “r,” and “y.”&lt;/p&gt;

&lt;p&gt;You can start up a pry session in the context of a Chef recipe easily by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-apply&lt;/code&gt;. The pry gem is bundled with the Chef omnibus package, so it’s immediately available.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'require &quot;pry&quot;; binding.pry'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will result in a prompt like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a recipe! Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; ls
Chef::EncryptedDataBagItem::CheckEncrypted#methods: encrypted?
Chef::DSL::DataQuery#methods: data_bag  data_bag_item  search
Chef::DSL::PlatformIntrospection#methods: platform?  platform_family?  value_for_platform  value_for_platform_family
Chef::DSL::IncludeRecipe#methods: include_recipe  load_recipe  require_recipe
*** SNIP ***

2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; cd node
2.1.6 (node[localhost.example.com]):1 &amp;gt; ls
*** SNIP ***
2.1.6 (node[localhost.example.com]):1 &amp;gt; exit
2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write a resource:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; file &quot;/tmp/hello_world&quot; do
2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 *   content &quot;I'm in pry!&quot;
2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 * end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file[/tmp/hello_world]&lt;/code&gt; resource. It doesn’t run Chef, but we can do that in one of two ways: exit pry, or send the create action to the resource.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; resources(&quot;file[/tmp/hello_world]&quot;).run_action :create
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[/tmp/hello_world] action create
    - create new file /tmp/hello_world
    - update content in file /tmp/hello_world from none to 3a5417
    --- /tmp/hello_world  2015-09-01 08:35:18.000000000 -0600
    +++ /tmp/.hello_world20150901-42665-11bwurx   2015-09-01 08:35:18.000000000 -0600
    @@ -1 +1,2 @@
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we write multiple resources, we’d have to send that action to every one of them. Exiting pry will work, but then we are, of course, no longer in the pry session. This is not ideal, but hey, it’s not like we’re in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-shell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-apply&lt;/code&gt; program runs in “solo mode.”&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; Chef::Config.solo
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, it may be useful to debug things through the Chef Server API. We will want to do two things. First, load a config file like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.chef/knife.rb&lt;/code&gt;. We can verify the Chef Server we want is configured by checking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chef::Config[:chef_server_url]&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; Chef::Config[:chef_server_url]
=&amp;gt; &quot;https://localhost:443&quot;
2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; Chef::Config.from_file('.chef/knife.rb')
=&amp;gt; &quot;client&quot;
2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; Chef::Config[:chef_server_url]
=&amp;gt; &quot;https://api.opscode.com/organizations/joshtest&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool. Now let’s borrow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-shell&lt;/code&gt;’s helper methods for interacting with the API.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'chef/shell/ext'
Chef::Shell::Extensions.extend_context_object(self)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now we can use, for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.get&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodes.all&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.1.6 (#&amp;lt;Chef::Recipe&amp;gt;):0 &amp;gt; api.get('/users')
=&amp;gt; [{&quot;user&quot;=&amp;gt;{&quot;username&quot;=&amp;gt;&quot;joshtest&quot;}}, {&quot;user&quot;=&amp;gt;{&quot;username&quot;=&amp;gt;&quot;jtimberman&quot;}}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, we can get a lot of this functionality by starting up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-shell&lt;/code&gt; and loading pry, but I think this was more fun :–).&lt;/p&gt;

&lt;p&gt;Learn more about &lt;a href=&quot;https://pry.github.io/&quot;&gt;pry&lt;/a&gt;.&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><summary type="html">This quick tip brought to you by the letters “p,” “r,” and “y.”</summary></entry><entry><title type="html">Quick Tip: Stubbing Library Helpers in ChefSpec</title><link href="/blog/2015/05/30/quick-tip-stubbing-library-helpers-in-chefspec" rel="alternate" type="text/html" title="Quick Tip: Stubbing Library Helpers in ChefSpec" /><published>2015-05-30T14:48:47+00:00</published><updated>2015-05-30T14:48:47+00:00</updated><id>/blog/2015/05/30/quick-tip-stubbing-library-helpers-in-chefspec</id><content type="html" xml:base="/blog/2015/05/30/quick-tip-stubbing-library-helpers-in-chefspec">&lt;p&gt;I’m currently updating my &lt;a href=&quot;https://supermarket.chef.io/cookbooks/vagrant&quot;&gt;vagrant cookbook&lt;/a&gt;, and adding &lt;a href=&quot;https://sethvargo.github.io/chefspec&quot;&gt;ChefSpec&lt;/a&gt; coverage. Each of the different platform recipes results in slightly different resources to download the package file and install it. To support this, I have &lt;a href=&quot;https://github.com/jtimberman/vagrant-cookbook/blob/master/libraries/helpers.rb&quot;&gt;helper methods&lt;/a&gt; that calculate the download URI, the package name, and the SHA256 checksum based on the version of Vagrant (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node['vagrant']['version']&lt;/code&gt;), and the platform (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node['os']&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node['platform_family']&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The outcomes I want to test are that for a given platform: the correct recipe is included, the correct file is downloaded, and the correct package resource installs the downloaded file. Those tests look like this (using Ubuntu/Debian example first):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'includes the debian platform family recipe'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include_recipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vagrant::debian'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'downloads the package from the calculated URI'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_remote_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/var/tmp/vagrant.deb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;source: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://dl.bintray.com/mitchellh/vagrant/vagrant_1.88.88_x86_64.deb'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'installs the downloaded package'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install_dpkg_package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vagrant'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;source: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/var/tmp/vagrant.deb'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve set the version attribute in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef_run&lt;/code&gt; block for the ChefSpec run to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.88.88&lt;/code&gt; to ensure that it doesn’t use the value set in the attributes file, and then I can test this specifically in the source for the calculated URI, even if the attribute changes - hopefully Vagrant doesn’t have a 1.88.88 version some day ;).&lt;/p&gt;

&lt;p&gt;When I run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rspec spec&lt;/code&gt;, I get exceptions, however.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) vagrant::default debian includes the debian platform family recipe
   Failure/Error: end.converge(described_recipe)
   OpenURI::HTTPError:
     404 Not Found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes/default.rb&lt;/code&gt;, the checksum is retrieved using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant_sha256sum&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vagrant'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'checksum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vagrant_sha256sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vagrant'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'version'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The exception is happening when Chef loads the attributes file, and because the version is not valid. The solution here is to stub out the return value from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant_sha256sum&lt;/code&gt;. This can be anything at all really, because that specific attribute is to make sure we don’t have to re-download the package to &lt;a href=&quot;http://docs.chef.io/resource_remote_file.html#attributes&quot;&gt;compare its checksum&lt;/a&gt; on later Chef runs. In this cookbook, the helper methods are not namespaced under a module, they’re bare methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libraries.helpers.rb&lt;/code&gt;. This &lt;a href=&quot;https://github.com/sethvargo/chefspec/issues/562&quot;&gt;poses some&lt;/a&gt; &lt;a href=&quot;https://github.com/sethvargo/chefspec/issues/549&quot;&gt;challenges&lt;/a&gt; &lt;a href=&quot;https://github.com/sethvargo/chefspec/issues/273&quot;&gt;when trying&lt;/a&gt; &lt;a href=&quot;https://github.com/sethvargo/chefspec/issues/138&quot;&gt;to stub&lt;/a&gt; &lt;a href=&quot;https://github.com/sethvargo/chefspec/issues/253&quot;&gt;them&lt;/a&gt; in ChefSpec. I won’t rehash all the ways I attempted to get this to work, and instead focus on the final solution that got the tests passing:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:vagrant_sha256sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When Chef loads cookbook attributes files, it is evaluating them in the context of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chef::Node&lt;/code&gt;, so those library helper methods are sent to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chef::Node&lt;/code&gt; object. Similarly, if this were inside a recipe, I would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chef::Recipe&lt;/code&gt;, and if it were inside a resource (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chef::Resource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I put this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;before&lt;/code&gt; block at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe 'vagrant::default'&lt;/code&gt; level, not within any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; blocks, so it will be done for each of the various per-platform tests. The results in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debian&lt;/code&gt; context are now:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% rspec spec --color -fd

vagrant::default
  debian
    includes the debian platform family recipe
    downloads the package from the calculated URI
    installs the downloaded package

Finished in 7.04 seconds (files took 7.93 seconds to load)
3 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Six issues have been filed against ChefSpec about this. Hopefully this can result in fewer inquiries.&lt;/p&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><category term="quicktips" /><category term="chef" /><summary type="html">I’m currently updating my vagrant cookbook, and adding ChefSpec coverage. Each of the different platform recipes results in slightly different resources to download the package file and install it. To support this, I have helper methods that calculate the download URI, the package name, and the SHA256 checksum based on the version of Vagrant (node['vagrant']['version']), and the platform (node['os'], node['platform_family']).</summary></entry><entry><title type="html">Quick Tip: Policyfile Run Lists</title><link href="/blog/2015/05/17/quick-tip-policyfile-run-lists" rel="alternate" type="text/html" title="Quick Tip: Policyfile Run Lists" /><published>2015-05-17T03:52:17+00:00</published><updated>2015-05-17T03:52:17+00:00</updated><id>/blog/2015/05/17/quick-tip-policyfile-run-lists</id><content type="html" xml:base="/blog/2015/05/17/quick-tip-policyfile-run-lists">&lt;p&gt;As I indicated on &lt;a href=&quot;https://twitter.com/jtimberman/status/599779453456097280&quot;&gt;Twitter earlier tonight&lt;/a&gt;, I’m working with the new Policyfile feature of &lt;a href=&quot;https://github.com/chef/chef-dk/blob/master/POLICYFILE_README.md&quot;&gt;ChefDK&lt;/a&gt;. While converting my personal systems’ repository to use Policyfile instead of roles, I found myself writing this Policyfile:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'home_server'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:community&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'build-essential'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'sudo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'runit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'ntp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'openssh'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'postfix'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'build-essential'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;git: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://github.com/mattray/packages-cookbook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'multipackage'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../housepub-chef-repo/cookbooks/users'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sudo'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'runit'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ntp'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'openssh'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'postfix'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No big deal, but I found the repetition… redundant. Several of these cookbooks are fine floating on the latest version from Supermarket - everything but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;packages&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt;. So I thought, “wouldn’t it be great if entries in the run list were automatically added as dependencies?”&lt;/p&gt;

&lt;p&gt;Then, I added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-client-runit&lt;/code&gt; to the run list, but I didn’t add it as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cookbook&lt;/code&gt; entry, performed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef update&lt;/code&gt;, and reran my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef provision&lt;/code&gt; command, and wound up with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-client-runit&lt;/code&gt; being converged.&lt;/p&gt;

&lt;p&gt;To illustrate this with a really simple example, I confirmed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% cd ~/Development/sandbox/test
% chef generate policyfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Policyfile.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;example_application&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:community&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zsh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cookbook&lt;/code&gt; line here.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% chef install
Building policy example_application
Expanded run list: recipe[zsh]
Caching Cookbooks...
Using      zsh 1.0.1

Lockfile written to /Users/jtimberman/Development/sandbox/test/Policyfile.lock.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if we examine the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Policyfile.lock.json&lt;/code&gt;, we see:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;revision_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;e8b5b48d35f4a8efcd037ef6c9cc8e34f901561ffef160bd0a57ca1b612a1179&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;example_application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;run_list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;recipe[zsh::default]&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cookbook_locks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;zsh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b512ef33af29b8d34ad7e4e9b6ad38d42dea4945&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dotted_decimal_identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;50967789358229944.59473511204894381.62483954551109&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cache_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zsh-1.0.1-supermarket.chef.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://supermarket.chef.io/api/v1/cookbooks/zsh/versions/1.0.1/download&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;source_options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;artifactserver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://supermarket.chef.io/api/v1/cookbooks/zsh/versions/1.0.1/download&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay! Shoutout to &lt;a href=&quot;https://twitter.com/kallistec&quot;&gt;Dan DeLeo&lt;/a&gt; for preemptively implementing features I didn’t even know I wanted yet :-).&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><category term="quicktips" /><category term="chef" /><summary type="html">As I indicated on Twitter earlier tonight, I’m working with the new Policyfile feature of ChefDK. While converting my personal systems’ repository to use Policyfile instead of roles, I found myself writing this Policyfile:</summary></entry><entry><title type="html">Quick Tip: ChefDK Provision</title><link href="/blog/2015/05/15/quick-tip-chefdk-provision" rel="alternate" type="text/html" title="Quick Tip: ChefDK Provision" /><published>2015-05-15T22:18:03+00:00</published><updated>2015-05-15T22:18:03+00:00</updated><id>/blog/2015/05/15/quick-tip-chefdk-provision</id><content type="html" xml:base="/blog/2015/05/15/quick-tip-chefdk-provision">&lt;p&gt;Earlier today, &lt;a href=&quot;https://www.chef.io/blog/2015/05/15/chefdk-0-6-0-released/&quot;&gt;ChefDK 0.6.0 was released&lt;/a&gt;. In this post, I will illustrate a fairly simple walkthrough using Amazon EC2, based on information in the &lt;a href=&quot;https://github.com/chef/chef-dk/blob/master/PROVISION_README.md#basic-example&quot;&gt;document&lt;/a&gt;. This example will include Policyfile use, too. Let’s get started.&lt;/p&gt;

&lt;p&gt;First, install ChefDK 0.6.0. You can get it from the &lt;a href=&quot;downloads.chef.io/chef-dk&quot;&gt;Chef Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, setup &lt;a href=&quot;https://jtimberman.housepub.org/blog/2013/10/19/managing-multiple-aws-account-credentials/&quot;&gt;AWS credentials&lt;/a&gt;. Ensure that they are exported to the current shell environment.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AWS_ACCESS_KEY_ID=secrets
AWS_SECRET_ACCESS_KEY=secrets
AWS_DEFAULT_REGION=us-east-1
AWS_SSH_KEY=your_ssh_key_name
AWS_ACCESS_KEY=secrets
AWS_SECRET_KEY=secrets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m going to use Hosted Chef as my Chef Server. I already have my user API key and configuration in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.chef&lt;/code&gt;, and I’m going to rely on the automatic configuration detection in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef&lt;/code&gt; command for that.&lt;/p&gt;

&lt;p&gt;Generate a new repository using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef generate&lt;/code&gt; command. Further commands run from this directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef generate repo chefdk-provision-demo
cd chefdk-provision-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provision&lt;/code&gt; cookbook. This is the required name, and it must be in the current directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef generate cookbook provision
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Edit the default recipe, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$EDITOR provision/recipes/default.rb&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ChefDK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ProvisioningData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;context&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;with_driver&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aws::us-west-2'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;ssh_username: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;use_private_ip_for_ssh: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;bootstrap_options: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;key_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jtimberman'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;image_id: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ami-0d5b6c3d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;instance_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'m3.medium'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;convergence_options: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convergence_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;node_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;machine_options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;converge&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To break this down, first we get the ChefDK provisioning context that will pass in options to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-provisioning&lt;/code&gt;. Then we tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef-provisioning&lt;/code&gt; to use the AWS driver, and in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;us-west-2&lt;/code&gt; region. The options hash is used to setup the instance. We’re using &lt;a href=&quot;https://wiki.debian.org/Cloud/AmazonEC2Image/Jessie&quot;&gt;Debian 8&lt;/a&gt;, which uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; user to log in, an SSH key that exists in the AWS region, the actual AMI, and finally the instance type. Then, we’re going to set the convergence options automatically from ChefDK. This is the important part that will ensure the node has the right run list.&lt;/p&gt;

&lt;p&gt;Generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Policyfile.rb&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef generate policyfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And edit its content, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$EDITOR Policyfile.rb&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;            &lt;span class=&quot;s2&quot;&gt;&quot;chefdk-provision-demo&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_source&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:community&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run_list&lt;/span&gt;        &lt;span class=&quot;s2&quot;&gt;&quot;recipe[libuuid-user]&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt;        &lt;span class=&quot;s2&quot;&gt;&quot;libuuid-user&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we’re simply getting the &lt;a href=&quot;https://supermarket.chef.io/cookbooks/libuuid&quot;&gt;libuuid-user cookbook from Supermarket&lt;/a&gt; and applying the default recipe to the nodes that have this policy.&lt;/p&gt;

&lt;p&gt;The next step is to install the Policyfile. This generates the Policyfile.lock.json, and downloads the cookbooks to the cache, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.chefdk/cache/cookbooks&lt;/code&gt;. If this isn’t run, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chef&lt;/code&gt; will complain, with a reminder to run it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can provision a testing system with this policy:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef provision testing --sync -n debian-libuuid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will result in output similar to this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Uploading policy to policy group testing
Uploaded libuuid-user 1.0.1 (c3220a49)
Compiling Cookbooks...
Recipe: provision::default
  * machine[debian-libuuid] action converge
    - Create debian-libuuid with AMI ami-0d5b6c3d in us-west-2
    - create node debian-libuuid at https://chef-api.example.com/organizations/testing
    -   add normal.tags = nil
    -   add normal.chef_provisioning = {&quot;hash&quot; =&amp;gt; &quot;of options&quot;}
    - waiting for debian-libuuid (i-251f1cec on aws::us-west-2) to be connectable (transport up and running) ...
    - been waiting 60/120 -- sleeping 10 seconds for debian-libuuid (i-251f1cec on aws::us-west-2) to be connectable ...
    - debian-libuuid is now connectable        - generate private key (2048 bits)
    - create directory /etc/chef on debian-libuuid
    - write file /etc/chef/client.pem on debian-libuuid
    - create client debian-libuuid at clients
    -   add public_key = &quot;-----BEGIN PUBLIC KEY-----\n...&quot;
    - Add debian-libuuid to client read ACLs
    - Add debian-libuuid to client update ACLs
    - create directory /etc/chef/ohai/hints on debian-libuuid
    - write file /etc/chef/ohai/hints/ec2.json on debian-libuuid
    - write file /etc/chef/client.rb on debian-libuuid
    - write file /tmp/chef-install.sh on debian-libuuid
    - run 'bash -c ' bash /tmp/chef-install.sh'' on debian-libuuid
    [debian-libuuid] Starting Chef Client, version 12.3.0
                     [2015-05-15T22:42:43+00:00] WARN: Using experimental Policyfile feature
                     resolving cookbooks for run list: [&quot;libuuid-user::default@1.0.1 (c3220a4)&quot;, &quot;libuuid-user::verify@1.0.1 (c3220a4)&quot;]
                     Synchronizing Cookbooks:
                       - libuuid-user
                     Compiling Cookbooks...
                     Converging 1 resources
                     Recipe: libuuid-user::default
                       * user[libuuid] action create
                       - create user libuuid

                     Running handlers:
                     Running handlers complete
                     Chef Client finished, 1/1 resources updated in 5.29666495 seconds
    - run 'chef-client -l auto' on debian-libuuid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Joshua Timberman</name></author><category term="quicktips" /><category term="chef" /><summary type="html">Earlier today, ChefDK 0.6.0 was released. In this post, I will illustrate a fairly simple walkthrough using Amazon EC2, based on information in the document. This example will include Policyfile use, too. Let’s get started.</summary></entry><entry><title type="html">Chef Audit Mode Introduction</title><link href="/blog/2015/04/04/chef-audit-mode-introduction" rel="alternate" type="text/html" title="Chef Audit Mode Introduction" /><published>2015-04-04T02:48:23+00:00</published><updated>2015-04-04T02:48:23+00:00</updated><id>/blog/2015/04/04/chef-audit-mode-introduction</id><content type="html" xml:base="/blog/2015/04/04/chef-audit-mode-introduction">&lt;p&gt;I’ve started working with the &lt;a href=&quot;https://docs.chef.io/analytics.html#audit-mode&quot;&gt;audit mode&lt;/a&gt; feature introduced in Chef version 12.1.0. Audit mode allows users to write custom rules (controls) in Chef recipes using new DSL helpers. In his &lt;a href=&quot;https://www.youtube.com/watch?v=g-_SW3adPwU&quot;&gt;ChefConf 2015 talk, “Compliance At Velocity,”&lt;/a&gt; James Casey goes into more of the background and reasoning for this. For now, I wanted to share a few tips with users who may be experimenting with this feature on their own, too.&lt;/p&gt;

&lt;p&gt;First, we need to update ChefDK to version 0.5.0, as that includes a version of test kitchen that &lt;a href=&quot;https://github.com/test-kitchen/test-kitchen/pull/652&quot;&gt;allows us to configure audit mode&lt;/a&gt; for chef-client.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -L https://chef.io/chef/install.sh | sudo bash -s -- -P chefdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, create a new cookbook for the audit mode tests.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chef generate cookbook audit-test
cd audit-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, modify the audit-test cookbook’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kitchen.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
driver:
  name: vagrant

provisioner:
  name: chef_zero
  client_rb:
    audit_mode: :audit_only

platforms:
  - name: ubuntu-12.04
  - name: centos-6.5

suites:
  - name: default
    run_list:
      - recipe[audit-test::default]
    attributes:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kitchen.yml&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_rb&lt;/code&gt; added to the provisioner config. Note that we must use the Ruby symbol syntax for the config value, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:audit_only&lt;/code&gt;. The other valid values for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audit_mode&lt;/code&gt; are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:enabled&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:disabled&lt;/code&gt;. This will be translated to an actual Ruby symbol in the generated config file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/kitchen/client.rb&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;audit_mode&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:audit_only&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s write a control rule to test. Since we’re using the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kitchen.yml&lt;/code&gt;, which includes Ubuntu 12.04 and uses SSH to connect, we can assume that SSH is running, so port 22 is listening. The following control asserts this is true.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;control_group&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Blog Post Examples'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SSH'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'should be listening on port 22'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitchen converge ubuntu&lt;/code&gt; to run Chef, but not tear down the VM aftward - we’ll use it again for another example. Here’s the audit phase output from the Chef run:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% kitchen converge ubuntu
Synchronizing Cookbooks:
  - audit-test
Compiling Cookbooks...
Starting audit phase

Blog Post Examples
  SSH
    should be listening on port 22

Finished in 0.10453 seconds (files took 0.37536 seconds to load)
1 example, 0 failures
Auditing complete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool! So we have asserted that the node complies with this control by default. But what does a failing control look like? Let’s write one. Since we’re working with SSH already, let’s use the SSHd configuration. By default in the Vagrant base box we’re using, root login is permitted, so this value is present:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PermitRootLogin yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, our security policy mandates that we set this to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no&lt;/code&gt;, and we want to audit that.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;control_group&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Blog Post Examples'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SSH'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'should be listening on port 22'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'disables root logins over ssh'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/etc/ssh/sshd_config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PermitRootLogin no'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rerun &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitchen converge ubuntu&lt;/code&gt; and we see the validation fails.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting audit phase

Blog Post Examples
  SSH
    should be listening on port 22
    disables root logins over ssh (FAILED - 1)

Failures:

  1) Blog Post Examples SSH disables root logins over ssh
     Failure/Error: expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
expected File &quot;/etc/ssh/sshd_config&quot; to contain &quot;PermitRootLogin no&quot;
     # /tmp/kitchen/cache/cookbooks/audit-test/recipes/default.rb:8:in `block (3 levels) in from_file'

Finished in 0.13067 seconds (files took 0.32089 seconds to load)
2 examples, 1 failure

Failed examples:

rspec  # Blog Post Examples SSH disables root logins over ssh
[2015-04-04T03:29:41+00:00] ERROR: Audit phase failed with error message: Audit phase found failures - 1/2 controls failed

Audit phase exception:
Audit phase found failures - 1/2 controls failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we have a failure, we’ll have contextual information about the failure, including the line number in the recipe where itwas found, and a stack trace (cut from the output here), in case more information is required for debugging. To fix the test, we can simply edit the config file to have the desired setting, or we can manage the file with Chef to set the value accordingly. Either way, after updating the file, the validation will pass, and all will be well.&lt;/p&gt;

&lt;p&gt;We can put as many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control_group&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control&lt;/code&gt; blocks with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt; validation rules as required to audit our policy. If we have many validations, it can be difficult to follow with all the output if there are failures. Chef’s audit mode is based on &lt;a href=&quot;http://serverspec.org/&quot;&gt;Serverspec&lt;/a&gt;, which is based on &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt;. We can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_tag&lt;/code&gt; configuration feature of RSpec to only run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control&lt;/code&gt; blocks or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt; statements that we’re interested in debugging. To do this, we need an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSpec.configuration&lt;/code&gt; block within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control_group&lt;/code&gt; - due to the way that audit mode is implemented, we can’t do it outside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control_group&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, we could debug our root login configuration:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;control_group&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Blog Post Examples'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter_run&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;focus: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SSH'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'should be listening on port 22'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_listening&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'disables root logins over ssh'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;focus: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/etc/ssh/sshd_config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PermitRootLogin no'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The key here is to pass the argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;focus: true&lt;/code&gt; (or if you like hash rockets, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:focus =&amp;gt; true&lt;/code&gt;) on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt; block. This could also be used on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SSH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;focus: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'does stuff...'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, when running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kitchen converge ubuntu&lt;/code&gt;, we see only that validation:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting audit phase

Blog Post Examples
  SSH
    disables root logins over ssh (FAILED - 1)

Failures:

  1) Blog Post Examples SSH disables root logins over ssh
     Failure/Error: expect(file('/etc/ssh/sshd_config')).to contain('PermitRootLogin no')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This example is simple enough that this isn’t necessary, but if we were implementing audit mode checks for our entire security policy, that could be dozens or even hundreds of controls.&lt;/p&gt;

&lt;p&gt;As of this writing, audit mode is still under development, and is considered an experimental feature. There will be further information, guides, and documentation about it coming to the Chef blog and docs site, and I’ll have a post coming soon with something I’m working on, so stay tuned!&lt;/p&gt;</content><author><name>Joshua Timberman</name></author><category term="chef" /><summary type="html">I’ve started working with the audit mode feature introduced in Chef version 12.1.0. Audit mode allows users to write custom rules (controls) in Chef recipes using new DSL helpers. In his ChefConf 2015 talk, “Compliance At Velocity,” James Casey goes into more of the background and reasoning for this. For now, I wanted to share a few tips with users who may be experimenting with this feature on their own, too.</summary></entry></feed>